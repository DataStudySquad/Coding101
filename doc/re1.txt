零基礎轉資工第六回 - 2023的轉資工指南】
最近chatGPT的狂潮，導致關於工程師未來會不會失業的問題，出現廣泛的討論。先說我的結論，我覺得還不會取代，至少不會在這100年取代。詳細的邏輯推演，最近再來寫一篇。
主要是想說，這篇所分享的學習資料，還是很值得去學，不需要過度杞人憂天，覺得學了也沒用。
直接進入正題。
---
階段一、完全0基礎：
對於完全0基礎的狀態，就需要一個通識類的課程，先幫助我們過一遍資工到底在幹嘛。畢竟資工現在有非常多的領域，每個大領域下，又有無數個子領域。光把一個子領域精通、並持續精進，就可以吃大半輩子的飯了。
這階段的免費教材，我推薦兩個：
1. Harvard CS50 https://ytube.io/3dXP
這算是0基礎轉資工最全面、最權威的課程了。是由哈佛的教授每年固定開授，也教10年了。是哈佛最受歡迎的課之一。
(我2014的時候看的，現在已經快出2023版了。這教授是真的有熱情。)
教授的教學風格挺風趣的，還會用很多很視覺化的例子幫助加深印象。教學的部分，涵蓋了CS淺觸大部分領域，我個人覺得難度算友好。
如果對於英文聽力比較苦手的夥伴，可以看別人翻譯的中英雙字幕
https://bityl.co/IKB7 ，版本不是最新的，但這種教材每年都大同小異，倒也無傷大雅。
推薦程度：必看。
2. Khan Academy https://bityl.co/IKBD 
這網站很不錯，是一位叫可汗(Khan)的MIT學生，所創立的非營利網站。成立10餘年，現在課程很多，且全部免費。
我以前大學的時候會看上面教的線性代數、統計學等。現在還有經濟學、以及連結附上的CS通識教學。
連結的課程我沒修過，但看課綱我覺得很不錯。且依照之前其他課的授課品質，我相信這門課一定也兼具簡單易懂、涵蓋知識面廣的優點。
推薦程度：網站優良。
---
階段二、初窺門徑：
這階段就是對二進制、演算法、資料結構、寫程式的方式等資工領域的必備知識，有很粗略的理解，準備好進一步的學習。
這階段我只推薦兩門課：
1. UC Berkeley CS61A https://cs61a.org/
這門課是文組轉資工必學的聖經，沒有之一。這是UC Berkeley最受歡迎的課程，每年都有上千人修習、以及世界各地無數對資工感興趣的人在上這門網課。
網站非常良心，所有教學資源都是開放的。教學也是為了零基礎的人準備，由淺入深。用的是簡單好上手的Python，也可以在學習這門課的過程中，直接把Python也學了。
這門課也有網友翻譯了一部分教材為中文 https://sicp-py.apachecn.org/#/
(但可以的話，還是建議直接看原檔。)
推薦程度：必看。
2. UC Berkeley CS61B https://sp23.datastructur.es/
上一門課的進階課程，用的是業界非常主流的Java。可說是學完這兩門課，現在最常用的Python、Java都一次學齊了。
這門課還會教Data Structure、Algorithm的概念，是之後寫Leetcode必備的知識。
但這門課相對會比較難自學，建議找人以讀書會的方式互通有無。
推薦程度：必看。
修完61A、61B後，其實就具備很初階的工程師能力了。接著就差下一個階段的最後補強。
----
階段三、逐漸上手：
這個階段，對於CS有什麼領域、每個領域大致在幹嘛已經有一定程度的理解。對於寫程式、及如何寫出時空間複雜度更低的程式，也有一定的瞭解。
就開始進入到選擇專門領域的深耕階段。也即是大家常會聽到的前端、後端、資安、手機開發等不同領域。
這個階段可以交錯使用網站及書籍進行學習。
網站的部分，大家最常聽到、接觸到的會是：
Coursera、Udemy、Codecademy、Udacity等，以下一一介紹。
1. Coursera https://www.coursera.org/
網站上整體的課程，教學風格都太偏理論，其實拿到業界用不太到。
這網站一直想增加課程證書的含金量，跟Linkedin也長年保持合作。但在我看來，修過xx名校的一系列課程後，這種線上證書實在很難為履歷加什麼實質分數。主要現在實質從名校畢業的人，已經足夠為業界所用，加上名校還每年積極擴招來增加收入，線上證書的虛擬證明，相較之下更加劣勢了。
但還是有兩個優點：
1. 還是有幾門課非常好，如這門演算法 https://bityl.co/IKDy 基本是必學。另外還有Andrew Ng經典的機器學習等。
2. 課程其實都可以免費拿到證書，只要在進入課程前，填寫要Financial Aid，之後填一下為什麼需要補助等，就可以獲得價值數十至數百美金的補助。(我以前都是填自己是窮學生，但很想拿證書等等 lol)
推薦程度：3.5/5
2. Udemy https://www.udemy.com/
課程非常非常多，不只是學程式，想學吉他、鋼琴、繪畫之類，上面應有盡有。
主要是英文為主，由於是任何素人都能上傳。所以課程質量不一定好。可以選擇評價最高的，通常不會錯到哪。如果不喜歡印度口音的，在購買課程前也務必先試聽後再決定。
課程特價的時候非常便宜，一門大概都是10.99美金，台幣300多。
缺點的話：
1. 課程我不知道是不是為了增加完備性，或是讓消費者覺得物超所值，很多課程都做成上百小時，其中包含很多我覺得不重要的過度細節。
2. 這種網站互動性一般不高。我的觀感是，互動性越低的課程，越難堅持。所以也是建議組讀書會。
推薦程度： 4 / 5 
3. Codecademy https://www.codecademy.com/learn
課程以前都是免費的，現在增加一些收費的項目。
我覺得教材還行，可以快速上手一門程式語言。
但真的要我來選，我會更喜歡看書。
推薦程度：4 / 5
4. Udacity https://www.udacity.com/
這個我蠻推薦的，在上述所有網課中，Udacity價格最高，會讓人有種錢都花下去了，要認真學的心態。另外這門課每個階段都會寫project，會有真人進行批改，並給予詳細建議。我覺得這點也還蠻重要的。
舉手機開發的課程為例，它會有四個project要寫，而這些專案，跟業界在做的事，相似度非常高。所學即所得，不會有產學落差的問題，這也是我喜歡這網站的地方。
價格的話，基本等特價再買，大概是三個月300多美金，不是特別便宜，但也是小於等於台北坊間上程式課的價格。
推薦程度：4.5 / 5
再來是書籍的部分。
書籍以入門來說，我一律推薦Head First系列的書籍，這是O'Reilly旗下最著名的產品線之一，寫作風格就是怎麼好理解就怎麼寫，完全捨棄過度學術的寫法。搭配極大量的插圖，誇張點來說，國中生都能完全看懂。
這類寫法的系列書還有Grokking xxx、xxx for dummies，都很不錯。
---
小結：
第一階段、完全0基礎：花一兩週，5-10小時的時間，瞭解CS的世界。
第二階段、初窺門徑：花三到六個月，50-100小時的時間，初步具備寫程式的能力。
階段三、逐漸上手：先瞭解一下未來想做什麼方面的工程師，接著花三個月到一年，上百小時的時間，認真鑽研一個領域。(沒偏好的話，我強烈推薦往手機開發的方向發展。)
以上的課，看似沒有修習很多，但都非常實用，能應用在業界；而非學了一堆理論，之後工作完全派不上用場。
每個階段好好學習，遇到不會的地方，積極的上網找答案、或找周遭朋友請教。只要一年的時間，就能具備一定程度的寫程式能力。
